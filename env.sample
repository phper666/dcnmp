################################################
###       environment config file            ###
################################################
# java项目代码存放路径，一般映射在宿主机/app目录下
JAVA_CODE_PATH=/app/webapps
# php项目代码存放路径，一般映射在宿主机/app目录下
CODE_PATH=/app/www
# 各个服务软件的数据备份，比如mysql、redis等等，防止容器挂后数据不见的问题
DATA_PATH=/app/data
# 各个服务的配置,放在当前目录下每个服务目录的conf目录中
CONF_PATH=./
# 各个服务的log
LOG_PATH=/app/log

#################### ALPINE ####################
#
# Container package fetch url
#
# Can be empty, followings or others:
# mirrors.163.com
# mirrors.aliyun.com
# mirrors.ustc.edu.cn
#
# Alpine Repositories
ALPINE_REPOSITORIES_REPLACE=true
ALPINE_REPOSITORIES=mirrors.aliyun.com

#################### DEBIAN ####################
DEBIAN_REPOSITORIES_REPLACE=true
# debian的源，默认用清华的源，感觉比阿里源稳定。。。，支持清华源mirrors.tuna.tsinghua.edu.cn、阿里云源mirrors.aliyun.com、163源mirrors.163.com、腾讯云源mirrors.cloud.tencent.com
DEBIAN_REPOSITORIES_URL=mirrors.tuna.tsinghua.edu.cn

############# Timezone for the containers ############
TZ=Asia/Shanghai

#################### Nginx #####################
# nginx版本
NGINX_VERSION=stable-alpine
# 开放端口
NGINX_HTTP_HOST_PORT=80
NGINX_HTTPS_HOST_PORT=443

# 不再支持压缩包安装，除非是一些特殊扩展
# 安装扩展支持的工具有pecl(php官方工具),install-php-extensions(非常好用的扩展安装脚本)，github地址:https://github.com/mlocati/docker-php-extension-installer
# 默认使用pecl安装，你也可以替换为install-php-extensions
# 不定期的更新install-php-extensions脚本，你也可以直接到github上面下载覆盖extensions/install-php-extensions
# 当前install-php-extensions为v2.1.10
PHP_INSTALL_EXTENSION_SCRIPT=install-php-extensions

############ PHP extensions #################
# PHP extensions:
# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,
# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,
# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,
# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,
# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,pdo_sqlsrv,opcache,
# redis,memcached,xdebug,swoole,sodium,yaf,amqp,mongodb,
# event,rar,ast,yac,yaconf,msgpack,igbinary,seaslog,varnish,
# xhprof,xlswriter,swoole

#
# 上面是php一些常规的扩展，如果你需要安装，则用英文的逗号分隔填写在PHP_EXTENSIONS
# 对于此处未列出的其他扩展，您也可以安装
# 需要去sh目录修改脚本
#################### end ####################

# 支持多个版本，可以查看https://github.com/docker-library/repo-info/tree/master/repos/php/remote
# 如果你用swoole不需要php-fpm的话，可以使用7.3-cli-alpine，如果需要php-fpm则用7.3-fpm-alpine
# 不再支持5和7.0版本，如果要使用5和7.0可能会有点问题，建议使用7.2以上的版本，性能有大幅度提升，也修复了很多bug
# php官方镜像主要是根据两种系统来进行打包
# 1、alpine 2、debian
# 如果你是常规开发，没有大量用到c标准的一些动态库，建议使用alpine，反之使用debian
# 例如：使用alpine的则直接在PHP_VERSION中填写7.3-fpm-alpine，如果使用debian则为7.3-fpm
PHP_VERSION=7.3-fpm-alpine

#映射端口
PHP_HOST_PORT_9000=9000
PHP_HOST_PORT_9501=9501
PHP_HOST_PORT_9502=9502
PHP_HOST_PORT_18306=18306

# 安装更多的PHP扩展脚本，如果是alpine类型的系统，则使用alpine.sh,反之使用debian.sh
PHP_MORE_EXTENSION_INSTALLER=alpine.sh
PHP_EXTENSIONS=pdo_mysql,redis,pcntl,mysqli,bcmath,sockets,sysvmsg,sysvsem,sysvshm,zip,gd,bz2,memcached,amqp,swoole,mongodb,xlswriter,event

# 是否切换debian的源,debian的源在source目录下,如果是alpine系统则不用管
PHP_REPLACE_SOURCE=true

# 安装supervisor
PHP_INSTALL_SUPERVISOR=true

# 指定swoole版本,如果直接写swoole,不指定则会默认拉取最新的版本.指定版本号则写swoole-4.8.6
PHP_SWOOLE_VERSION=swoole

#################### PHP7 支持安装多个镜像 ####################
# 支持多个版本，可以查看https://github.com/docker-library/repo-info/tree/master/repos/php/remote
# 如果你用swoole不需要php-fpm的话，可以使用7.3-cli-alpine，如果需要php-fpm则用7.3-fpm-alpine
# 不再支持5和7.0版本，如果要使用5和7.0可能会有点问题，建议使用7.2以上的版本，性能有大幅度提升，也修复了很多bug
# php官方镜像主要是根据两种系统来进行打包
# 1、alpine 2、debian
# 如果你是常规开发，没有大量用到c标准的一些动态库，建议使用alpine，反之使用debian
# 例如：使用alpine的则直接在PHP_VERSION中填写7.3-fpm-alpine，如果使用debian则为7.3-fpm
PHP7_VERSION=7.3-fpm

#映射端口
PHP7_HOST_PORT_9001=9001
PHP7_HOST_PORT_9503=9503
PHP7_HOST_PORT_9504=9504
PHP7_HOST_PORT_18307=18307

# 安装更多的PHP扩展脚本，如果是alpine类型的系统，则使用alpine.sh,反之使用debian.sh
PHP7_MORE_EXTENSION_INSTALLER=debian.sh
PHP7_EXTENSIONS=pdo_mysql,redis,pcntl,mysqli,bcmath,sockets,sysvmsg,sysvsem,sysvshm,zip,gd,bz2,memcached,amqp,xlswriter,swoole,mongodb,event

# 是否切换debian的源,debian的源在source目录下,如果是alpine系统则不用管
PHP7_REPLACE_SOURCE=true

# 安装supervisor
PHP7_INSTALL_SUPERVISOR=true

# 指定swoole版本,如果直接写swoole,不指定则会默认拉取最新的版本.指定版本号则写swoole-4.8.6
PHP7_SWOOLE_VERSION=swoole

#################### PHP8 支持安装多个镜像 ####################
# 支持多个版本，可以查看https://github.com/docker-library/repo-info/tree/master/repos/php/remote
# 如果你用swoole不需要php-fpm的话，可以使用7.3-cli-alpine，如果需要php-fpm则用7.3-fpm-alpine
# 不再支持5和7.0版本，如果要使用5和7.0可能会有点问题，建议使用7.2以上的版本，性能有大幅度提升，也修复了很多bug
# php官方镜像主要是根据两种系统来进行打包
# 1、alpine 2、debian
# 如果你是常规开发，没有大量用到c标准的一些动态库，建议使用alpine，反之使用debian
# 例如：使用alpine的则直接在PHP_VERSION中填写7.3-fpm-alpine，如果使用debian则为7.3-fpm
PHP8_VERSION=8.1-fpm

#映射端口
PHP8_HOST_PORT_9002=9002
PHP8_HOST_PORT_9505=9505
PHP8_HOST_PORT_9506=9506
PHP8_HOST_PORT_18308=18308

# 安装更多的PHP扩展脚本，如果是alpine类型的系统，则使用alpine.sh,反之使用debian.sh
PHP8_MORE_EXTENSION_INSTALLER=debian.sh
#PHP8_EXTENSIONS=pdo_mysql,redis,pcntl,mysqli,bcmath,sockets,sysvmsg,sysvsem,sysvshm,zip,gd,bz2,memcached,amqp,xlswriter,swoole,mongodb
PHP8_EXTENSIONS=pdo_mysql,redis,pcntl,mysqli,bcmath,sockets,sysvmsg,sysvsem,sysvshm,zip,gd,bz2,memcached,amqp,swoole,mongodb,xlswriter,event

# 是否切换debian的源,debian的源在source目录下,如果是alpine系统则不用管
PHP8_REPLACE_SOURCE=true

# 安装supervisor
PHP8_INSTALL_SUPERVISOR=true

# 指定swoole版本,如果直接写swoole,不指定则会默认拉取最新的版本.指定版本号则写swoole-4.8.6
PHP8_SWOOLE_VERSION=swoole

#################### MySQL #####################
MYSQL_VERSION=5.7
MYSQL_HOST_PORT=3306
# 生产环境请替换密码
MYSQL_ROOT_PASSWORD=123456

#################### MySQL8 #####################
MYSQL8_VERSION=8
MYSQL8_HOST_PORT=3308
# 生产环境请替换密码
MYSQL8_ROOT_PASSWORD=123456

#################### MONGODB #####################
MONGODB_VERSION=4.2
MONGODB_HOST_PORT=27017
MONGODB_INITDB_ROOT_USERNAME=root
MONGODB_INITDB_ROOT_PASSWORD=123456

#################### Redis #####################
REDIS_VERSION=5.0-alpine
REDIS_HOST_PORT=6379

#################### RABBITMQ #####################
RABBITMQ_VERSION=management
RABBITMQ_HOST_PORT_C=5672
RABBITMQ_HOST_PORT_S=15672
RABBITMQ_DEFAULT_USER=myuser
RABBITMQ_DEFAULT_PASS=mypass

################# redisMyAdmin #################
REDISMYADMIN_VERSION=erikdubbelboer/phpredisadmin:latest
REDISMYADMIN_HOST_PORT=8081

################# nodejs #################
NODEJS_VERSION=12.8-alpine
NODEJS_HOST_PORT_3000=3000
NODEJS_HOST_PORT_8088=8088

################ openjdk #################
OPENJDK_VERSION=9
OPENJDK_HOST_PORT_8080=8080
OPENJDK_HOST_PORT_8081=8081
OPENJDK_HOST_PORT_8082=8082
OPENJDK_HOST_PORT_8083=8083
# openjdk，如果是alpine类型的系统，则使用alpine.sh,反之使用debian.sh
OPENJDK_MORE_INSTALLER=debian.sh
MAVEN_VERSION=apache-maven-3.6.3-bin.tar.gz

### POSTGRES ##############################################
POSTGRES_VERSION=alpine
POSTGRES_DB=default
POSTGRES_USER=default
POSTGRES_PASSWORD=123456
POSTGRES_PORT=5432

### HARBOR POSTGRES INIT ###############################################
HARBOR_POSTGRES_INIT=true
HARBOR_POSTGRES_HOST=postgres
HARBOR_POSTGRES_DB=harbor
HARBOR_POSTGRES_USER=harbor
HARBOR_POSTGRES_PASSWORD=123456

### HARBOR NOTARY SIGNER POSTGRES INIT ###############################################
HARBOR_POSTGRES_NOTARY_SIGNER_INIT=true
HARBOR_POSTGRES_NOTARY_SIGNER_DB=notary_signer
HARBOR_POSTGRES_NOTARY_SIGNER_USER=notary_signer
HARBOR_POSTGRES_NOTARY_SIGNER_PASSWORD=123456

### HARBOR NOTARY SERVER POSTGRES INIT ###############################################
HARBOR_POSTGRES_NOTARY_SERVER_INIT=true
HARBOR_POSTGRES_NOTARY_SERVER_DB=notary_server
HARBOR_POSTGRES_NOTARY_SERVER_USER=notary_server
HARBOR_POSTGRES_NOTARY_SERVER_PASSWORD=123456

### POSTGRES-POSTGIS ##############################################
POSTGIS_VERSION=latest
POSTGIS_INSTALL_PGSQL_HTTP_FOR_POSTGIS13=false

### SONARQUBE ################################################
## docker-compose up -d sonarqube
## (If you encounter a database error)
## docker-compose exec --user=root postgres
## source docker-entrypoint-initdb.d/init_sonarqube_db.sh
## (If you encounter logs error)
## docker-compose run --user=root --rm sonarqube chown sonarqube:sonarqube /opt/sonarqube/logs
SONARQUBE_VERSION=latest
SONARQUBE_PORT=9000
SONARQUBE_POSTGRES_INIT=true
SONARQUBE_POSTGRES_HOST=postgres
SONARQUBE_POSTGRES_DB=sonar
SONARQUBE_POSTGRES_USER=sonar
SONARQUBE_POSTGRES_PASSWORD=123456

### GITLAB ###############################################
GITLAB_VERSION=latest
GITLAB_POSTGRES_INIT=true
GITLAB_HOST_HTTP_PORT=8989
GITLAB_HOST_HTTPS_PORT=9898
GITLAB_HOST_SSH_PORT=2289
GITLAB_HOST_NOTICE_PORT=8929
GITLAB_DOMAIN_NAME=http://localhost
GITLAB_ROOT_PASSWORD=dcnmp123456

# gitlab有自带的Redis，如果用自带的redis，则设置为true，不用自带的redis，用自己搭建的外部redis，则设置为false
GITLAB_REDIS_ENABLE=false
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DATABASE=8

# gitlab有自带的postgres，如果用自带的postgres，则设置为true，不用自带的postgres，用自己搭建的外部postgres，则设置为false
GITLAB_POSTGRES_ENABLE=false
GITLAB_POSTGRES_INIT=true
GITLAB_POSTGRES_HOST=postgres
GITLAB_POSTGRES_USER=gitlab
GITLAB_POSTGRES_DB=gitlab
GITLAB_POSTGRES_PASSWORD=123456

### GITLAB JH ###############################################
GITLAB_JH_VERSION=latest
GITLAB_JH_POSTGRES_INIT=true
GITLAB_JH_HOST_HTTP_PORT=8000
GITLAB_JH_HOST_HTTPS_PORT=8443
GITLAB_JH_HOST_SSH_PORT=2290
GITLAB_JH_HOST_NOTICE_PORT=8939
GITLAB_JH_DOMAIN_NAME=http://localhost
GITLAB_JH_ROOT_PASSWORD=dcnmp123456

# gitlab-jh有自带的Redis，如果用自带的redis，则设置为true，不用自带的redis，用自己搭建的外部redis，则设置为false
GITLAB_JH_REDIS_ENABLE=false
REDIS_JH_HOST=redis
REDIS_JH_PORT=6379
REDIS_JH_DATABASE=7

# gitlab-jh有自带的postgres，如果用自带的postgres，则设置为true，不用自带的postgres，用自己搭建的外部postgres，则设置为false
GITLAB_JH_POSTGRES_ENABLE=false
GITLAB_JH_POSTGRES_INIT=true
GITLAB_JH_POSTGRES_HOST=postgres
GITLAB_JH_POSTGRES_USER=gitlab_jh
GITLAB_JH_POSTGRES_DB=gitlab_jh
GITLAB_JH_POSTGRES_PASSWORD=123456

### GITLAB-RUNNER ###############################################
GITLAB_RUNNER_VERSION=alpine-v15.10.0
# 如果gitlab和gitlab-runner部署在同一个机器，则直接使用gitlab容器名即可，如果不是同一个机器，请改为http://ip:port的方式
GITLAB_CI_SERVER_URL=http://gitlab
GITLAB_RUNNER_REGISTRATION_TOKEN="可以在runnner页面看到，或者创建的仓库里面也有"
GITLAB_REGISTER_NON_INTERACTIVE=true

### NEXUS3 ###############################################
# nexus3默认的admin登录密码必须要进入nexus容器才能知道
# docker exec -it 容器id bash  && cat cat /opt/sonatype/sonatype-work/nexus/admin.password
NEXUS3_VERSION=latest
NEXUS3_PORT=8090
# 安装支持php依赖的composer仓库格式的插件，https://github.com/sonatype-nexus-community/nexus-repository-composer
NEXUS3_REPOSITORY_COMPOSER_VERSION=0.0.29

### JENKINS ###############################################
JENKINS_VERSION=lts-jdk17
JENKINS_HTTP_PORT=9999
JENKINS_PORT_50000=50000
# jenkins容器里面可能会用到docker，该变量配置为你宿主机的docker.sock的路径
JENKINS_HOST_DOCKER_DOCK=/var/run/docker.sock
# 宿主机docker运行的执行文件路径
JENKINS_HOST_DOCKER_PATH=/usr/bin/docker
